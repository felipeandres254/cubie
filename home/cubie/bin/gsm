#!/usr/bin/python3
#
# Quectel M95 management tool
# Author: @felipeandres254
# Description: Manage Quectel M95 module

import argparse
import datetime
import math
import re
import serial
import subprocess
import time

# Parse CLI arguments
parser = argparse.ArgumentParser(description='Manage Quectel M95 module')
parser.add_argument('power', nargs='?', choices=['on', 'off'], help='power on/off the module')
parser.add_argument('--listen', action='store_true', help='continuous listening of port')
parser.add_argument('--get', action='store', help='the property to get')
args = parser.parse_args()

# Configure serial port
s = serial.Serial('/dev/ttyS1', 9600, timeout=1)

def _exit(code = 0):
  """Alias for safe CLI exit"""
  while s.is_open:
    s.close()
  time.sleep(0.1)
  exit(code)

def QUECTEL_M95__STATUS():
  """Get the module status"""
  status = subprocess.run(['gpio', 'read', 'pc19'], stdout=subprocess.PIPE)
  return int(status.stdout.decode('utf-8'))

def QUECTEL_M95__READ():
  """Read a line from module UART"""
  return s.readline().decode('utf-8').strip()

def QUECTEL_M95__WRITE(command, data = []):
  """Write a command to the module"""
  command = 'AT' + command + '\n'
  s.write(command.encode())
  QUECTEL_M95__READ()
  line, output = '\n', ''
  while line != '':
    output += line + '\n'
    line = QUECTEL_M95__READ()
  return output.strip()

def QUECTEL_M95__POWER_ON():
  """Power on the module"""
  if QUECTEL_M95__STATUS() == 1:
    _exit()
  while QUECTEL_M95__STATUS() == 0:
    subprocess.run(['gpio', 'write', 'pg1', '1'], stdout=subprocess.PIPE)
    time.sleep(0.1)
  subprocess.run(['gpio', 'write', 'pg1', '0'], stdout=subprocess.PIPE)
  #
  while QUECTEL_M95__READ() != 'Call Ready':
    pass
  while not QUECTEL_M95__READ().startswith('+QNITZ'):
    pass
  #
  QUECTEL_M95__WRITE('+QNITZ=1')
  QUECTEL_M95__WRITE('+CTZU=1')
  _exit()

def QUECTEL_M95__POWER_OFF():
  """Power off the module"""
  if QUECTEL_M95__STATUS() == 0:
    _exit()
  while QUECTEL_M95__STATUS() == 1:
    subprocess.run(['gpio', 'write', 'pg1', '1'], stdout=subprocess.PIPE)
    time.sleep(0.1)
  subprocess.run(['gpio', 'write', 'pg1', '0'], stdout=subprocess.PIPE)
  #
  while QUECTEL_M95__READ() != 'NORMAL POWER DOWN':
    pass
  _exit()

## ==================================================
##  MAIN PROGRAM
## ==================================================

# Power status change
if args.power == 'on':
  QUECTEL_M95__POWER_ON()
if args.power == 'off':
  QUECTEL_M95__POWER_OFF()

# Module not turned on
if QUECTEL_M95__STATUS() == 0:
  _exit(1)

# Continuous listen
if args.listen:
  while True:
    ts = datetime.datetime.now()
    if ts.second % 5 != 0 or ts.second == 0:
      continue
    line = QUECTEL_M95__READ()
    if line and line != 'OK':
      print(line)
  _exit()

# Get module properties
QUECTEL_M95__PROPERTIES = 'clk imei operator number rssi ber'.split(' ')
if args.get:
  if args.get not in QUECTEL_M95__PROPERTIES:
    _exit(1)
  if args.get == 'clk':
    response = QUECTEL_M95__WRITE('+CCLK?')
    response = re.findall(r'"(.*)"', response)
    response = response[0][:17]
    response = datetime.datetime.strptime(response, '%y/%m/%d,%H:%M:%S')
    response = response.strftime('%Y-%m-%dT%H:%M:%SZ')
    print(response)
  if args.get == 'imei':
    print(QUECTEL_M95__WRITE('+GSN'))
  if args.get == 'operator':
    response = QUECTEL_M95__WRITE('+COPS?')
    response = re.findall(r'"(.*)"', response)
    if not response or not response[0] or response[0] != 'Tigo':
      _exit(1)
    print('Movil Exito')
  if args.get == 'number':
    response = QUECTEL_M95__WRITE('+CNUM')
    response = re.findall(r'","(.*)"', response)
    if not response or not response[0]:
      _exit(1)
    print('+57 ' + response[0])
  if args.get == 'rssi':
    response = QUECTEL_M95__WRITE('+CSQ')
    response = re.findall(r' (.*),', response)
    if not response or not response[0] or response[0] == '99':
      _exit(1)
    print(str(2*int(response[0]) - 113) + 'dBm')
  if args.get == 'ber':
    response = QUECTEL_M95__WRITE('+CSQ')
    response = re.findall(r',(.*)', response)
    if not response or not response[0] or response[0] == '99':
      _exit(1)
    if response[0] == '0':
      print('0%')
    else:
      print(str((2**int(response[0]))/10.0) + '%')
  _exit()
