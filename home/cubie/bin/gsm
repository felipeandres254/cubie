#!/usr/bin/python3
#
# Quectel M95 - Management tool
# Author: @felipeandres254
# Description: Manage Quectel M95 module

import argparse
import serial
import subprocess

# Parse CLI arguments
parser = argparse.ArgumentParser(description='Manage Quectel M95 module')
parser.add_argument('power', nargs='?', choices=['on', 'off'], help='power on/off the module')
parser.add_argument('--status', action='store_true', help='get the status of the module')
parser.add_argument('--read', action='store', help='read a line from the module port')
parser.add_argument('--write', nargs='?', help='write raw command and data to the module port')
args = parser.parse_args()

# Configure serial port
s = serial.Serial('/dev/ttyS1', 9600, timeout=0.1)

def _exit(code = 0):
  """Alias for safe CLI exit"""
  while s.is_open:
    s.close()
  exit(code)

def QUECTEL_M95__STATUS():
  """Get the module status"""
  status = subprocess.run(['gpio', 'read', 'pc19'], stdout=subprocess.PIPE)
  return int(status.stdout.decode('utf-8'))

def QUECTEL_M95__READ():
  """Read a line from module UART"""
  return s.readline().decode('utf-8').strip()

def QUECTEL_M95__WRITE(command, data = None):
  """Write a command to the module"""
  command = 'AT' + command + '\n'
  s.write(command.encode())
  #
  if data is None:
    QUECTEL_M95__READ()
  else:
    prompt = ''
    while prompt != data['start']:
      prompt = QUECTEL_M95__READ()
    s.write((data['content'] + data['end'] + '\n').encode())
  #
  line, output = '', ''
  while line != 'OK':
    output += line + '\n'
    line = QUECTEL_M95__READ()
    if 'ERR' in line:
      raise IOError(line)
  return output.strip()

def QUECTEL_M95__POWER_ON():
  """Power on the module"""
  if QUECTEL_M95__STATUS() == 1:
    _exit()
  while QUECTEL_M95__STATUS() == 0:
    subprocess.run(['gpio', 'write', 'pg1', '1'], stdout=subprocess.PIPE)
  subprocess.run(['gpio', 'write', 'pg1', '0'], stdout=subprocess.PIPE)
  #
  while QUECTEL_M95__READ() != 'Call Ready':
    pass
  #
  QUECTEL_M95__WRITE('+QNITZ=1')
  QUECTEL_M95__WRITE('+CTZU=1')
  _exit()

def QUECTEL_M95__POWER_OFF():
  """Power off the module"""
  if QUECTEL_M95__STATUS() == 0:
    _exit()
  while QUECTEL_M95__STATUS() == 1:
    subprocess.run(['gpio', 'write', 'pg1', '1'], stdout=subprocess.PIPE)
  subprocess.run(['gpio', 'write', 'pg1', '0'], stdout=subprocess.PIPE)
  #
  while QUECTEL_M95__READ() != 'NORMAL POWER DOWN':
    pass
  #
  _exit()

## ==================================================
##  MAIN PROGRAM
## ==================================================

# Power status change
if args.power == 'on':
  QUECTEL_M95__POWER_ON()
if args.power == 'off':
  QUECTEL_M95__POWER_OFF()

# Get module status
if args.status:
  print('on' if QUECTEL_M95__STATUS() else 'off')
  _exit()

# Read a line
if args.read:
  print(QUECTEL_M95__READ())
  _exit()

# Write a command
if args.write:
  args.write = args.write.split(';;')
  cmd = args.write[0]
  data = None
  if len(args.write) > 1:
    data = {
      'start': args.write[1],
      'content': args.write[2],
      'end': chr(int(args.write[3])),
    }
  print(QUECTEL_M95__WRITE(cmd, data))
  _exit()
