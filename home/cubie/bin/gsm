#!/usr/bin/python3
#
# Quectel M95 management tool
# Author: @felipeandres254
# Description: Manage Quectel M95 module

import argparse
import serial
import subprocess
import time

# Parse CLI arguments
parser = argparse.ArgumentParser(description='Manage Quectel M95 module')
parser.add_argument('action', choices=['on', 'off', 'read', 'write'], help='the action to take')
parser.add_argument('args', nargs='*', help='the action inputs')
args = parser.parse_args()

# Configure serial port
s = serial.Serial()
s.port = '/dev/ttyS1'
s.baudrate = 9600
s.timeout = 1

def QUECTEL_M95__STATUS():
  """Get the module status"""
  status = subprocess.run(['gpio', 'read', 'pc19'], stdout=subprocess.PIPE)
  return int(result.stdout.decode('utf-8'))

def QUECTEL_M95__POWER_ON():
  """Power on the module"""
  if QUECTEL_M95__STATUS() == 1:
    time.sleep(1)
    exit()
  while QUECTEL_M95__STATUS() == 0:
    subprocess.run(['gpio', 'write', 'pg1', '1'], stdout=subprocess.PIPE)
    time.sleep(0.1)
  subprocess.run(['gpio', 'write', 'pg1', '0'], stdout=subprocess.PIPE)
  time.sleep(1)
  s.open()
  flag = 0
  while flag < 2:
    data = s.readline().decode('utf-8').strip()
    if not data:
      continue
    if data == 'Call Ready' or data.startswith('+QNITZ'):
      flag += 1
  s.close()
  time.sleep(1)
  exit()

def QUECTEL_M95__POWER_OFF():
  """Power off the module"""
  if QUECTEL_M95__STATUS() == 0:
    time.sleep(1)
    exit()
  while QUECTEL_M95__STATUS() == 1:
    subprocess.run(['gpio', 'write', 'pg1', '1'], stdout=subprocess.PIPE)
    time.sleep(0.1)
  subprocess.run(['gpio', 'write', 'pg1', '0'], stdout=subprocess.PIPE)
  time.sleep(1)
  s.open()
  flag = 0
  while flag < 1:
    data = s.readline().decode('utf-8').strip()
    if not data:
      continue
    if data == 'NORMAL POWER DOWN':
      flag += 1
  s.close()
  time.sleep(1)
  exit()

if args.action == 'on':
  QUECTEL_M95__POWER_ON()
if args.action == 'off':
  QUECTEL_M95__POWER_OFF()
