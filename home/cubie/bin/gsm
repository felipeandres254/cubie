#!/usr/bin/python3
#
# Quectel M95 management tool
# Author: @felipeandres254
# Description: Manage Quectel M95 module

import argparse
import serial
import subprocess
import time

# Parse CLI arguments
parser = argparse.ArgumentParser(description='Manage Quectel M95 module')
parser.add_argument('action', choices=['on', 'off', 'read', 'write'], help='the action to take')
parser.add_argument('args', nargs='*', help='the action inputs')
args = parser.parse_args()

# Configure serial port
s = serial.Serial('/dev/ttyS1', 9600, timeout=1)

def _exit(code = 0):
  """Alias for safe CLI exit"""
  while s.is_open:
    s.close()
  time.sleep(0.1)
  exit(code)

def QUECTEL_M95__STATUS():
  """Get the module status"""
  status = subprocess.run(['gpio', 'read', 'pc19'], stdout=subprocess.PIPE)
  return int(status.stdout.decode('utf-8'))

def QUECTEL_M95__READ():
  """Read a line from module UART"""
  return s.readline().decode('utf-8').strip()

def QUECTEL_M95__WRITE(command, data = []):
  """Write a command to the module"""
  command = 'AT' + command + '\n'
  s.write(command.encode())
  QUECTEL_M95__READ()
  line, output = '\n', ''
  while line != '':
    output += line + '\n'
    line = QUECTEL_M95__READ()
  return output.strip()

def QUECTEL_M95__POWER_ON():
  """Power on the module"""
  if QUECTEL_M95__STATUS() == 1:
    _exit()
  while QUECTEL_M95__STATUS() == 0:
    subprocess.run(['gpio', 'write', 'pg1', '1'], stdout=subprocess.PIPE)
    time.sleep(0.1)
  subprocess.run(['gpio', 'write', 'pg1', '0'], stdout=subprocess.PIPE)
  #
  while QUECTEL_M95__READ() != 'Call Ready':
    pass
  while not QUECTEL_M95__READ().startswith('+QNITZ'):
    pass
  _exit()

def QUECTEL_M95__POWER_OFF():
  """Power off the module"""
  if QUECTEL_M95__STATUS() == 0:
    _exit()
  while QUECTEL_M95__STATUS() == 1:
    subprocess.run(['gpio', 'write', 'pg1', '1'], stdout=subprocess.PIPE)
    time.sleep(0.1)
  subprocess.run(['gpio', 'write', 'pg1', '0'], stdout=subprocess.PIPE)
  #
  while QUECTEL_M95__READ() != 'NORMAL POWER DOWN':
    pass
  _exit()

# Power status change
if args.action == 'on':
  QUECTEL_M95__POWER_ON()
if args.action == 'off':
  QUECTEL_M95__POWER_OFF()

# Not turned on
if QUECTEL_M95__STATUS() == 0:
  _exit(1)

# Write to UART and print response
if args.action == 'write':
  if not args.args:
    args.args = ['']
  print(QUECTEL_M95__WRITE(args.args[0]))
  _exit()
