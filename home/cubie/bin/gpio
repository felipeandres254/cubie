#!/usr/bin/python3
#
# GPIO management tool
# Author: @felipeandres254
# Description: Manage GPIO pins

import argparse
import os.path
import re

# Parse CLI arguments
def pin_type(value, pattern=re.compile(r'[p|P][a-iA-I][0-9]{1,2}')):
  if not pattern.match(value) or int(value[2:]) <= 0 or int(value[2:]) >= 32:
    raise argparse.ArgumentTypeError("Pin '" + value + "' is invalid")
  return value.lower()
parser = argparse.ArgumentParser(description='Manage GPIO pins')
parser.add_argument('action', choices=['read', 'write'], help='the action to execute')
parser.add_argument('pin', type=pin_type, help='the pin to operate')
parser.add_argument('value', nargs='?', help="boolean input for 'write'")
args = parser.parse_args()

## ==================================================
##  MAIN PROGRAM
## ==================================================

# Check if pin is enabled
GPIO = int(args.pin[2:]) + 32*(ord(args.pin[1]) - 97)
GPIO = '/sys/class/gpio/gpio' + str(GPIO)
if not os.path.exists(GPIO):
  raise IOError("Pin '" + args.pin + "' is disabled")

if args.action == 'read':
  open(GPIO + '/direction', 'w').write('in')
  print(open(GPIO + '/value', 'r').read().strip())
if args.action == 'write':
  open(GPIO + '/direction', 'w').write('out')
  open(GPIO + '/value', 'w').write(args.value if args.value else '0')
